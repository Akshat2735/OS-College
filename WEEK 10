#include <stdio.h>

#define MAX_PROCESSES 10
#define MAX_RESOURCES 10

int main() {
    int n, m;  // Number of processes and resources
    int available[MAX_RESOURCES];  // Available resources
    int max[MAX_PROCESSES][MAX_RESOURCES];  // Maximum demand of each process
    int allocation[MAX_PROCESSES][MAX_RESOURCES];  // Resources allocated to each process
    int need[MAX_PROCESSES][MAX_RESOURCES];  // Remaining need of each process

    printf("Enter the number of processes: ");
    scanf("%d", &n);
    printf("Enter the number of resources: ");
    scanf("%d", &m);

    // Input available resources
    printf("Enter the available resources:\n");
    for (int i = 0; i < m; i++) {
        scanf("%d", &available[i]);
    }

    // Input maximum demand of each process
    printf("Enter the maximum demand of each process:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            scanf("%d", &max[i][j]);
        }
    }

    // Initialize allocation and need matrices
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            allocation[i][j] = 0;
            need[i][j] = max[i][j];
        }
    }

    // Simulate resource allocation and check for safety
    int finish[MAX_PROCESSES];  // Array to mark finished processes
    int work[MAX_RESOURCES];  // Work vector

    for (int i = 0; i < n; i++) {
        finish[i] = 0;
    }

    for (int i = 0; i < m; i++) {
        work[i] = available[i];
    }

    int count = 0;
    while (count < n) {
        int found = 0;
        for (int i = 0; i < n; i++) {
            if (finish[i] == 0) {
                int j;
                for (j = 0; j < m; j++) {
                    if (need[i][j] > work[j]) {
                        break;
                    }
                }
                if (j == m) {
                    for (int k = 0; k < m; k++) {
                        work[k] += allocation[i][k];
                        allocation[i][k] = 0;
                        finish[i] = 1;
                        count++;
                        found = 1;
                    }
                }
            }
        }

        if (found == 0) {
            printf("The system is in an unsafe state.\n");
            return 0;
        }
    }

    printf("The system is in a safe state.\n");
    printf("Safe sequence: ");
    for (int i = 0; i < n; i++) {
        if (finish[i] == 1) {
            printf("P%d ", i);
        }
    }
    printf("\n");

    return 0;
}

SAMPLE OUTPUT
Enter the number of processes: 5
Enter the number of resources: 3
Enter the available resources:
3 0 2
Enter the maximum demand of each process:
7 5 3
0 2 2
6 0 0
0 6 1
4 3 3
The system is in a safe state.
Safe sequence: P1 P2 P3 P0 P4
