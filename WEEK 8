#include <stdio.h>

struct Process {
    int pid;
    int burstTime;
    int waitTime;
    int turnAroundTime;
};

void calculateWaitingTime(struct Process proc[], int n) {
    proc[0].waitTime = 0;
    for (int i = 1; i < n; i++) {
        proc[i].waitTime = proc[i-1].waitTime + proc[i-1].burstTime;
    }
}

void calculateTurnAroundTime(struct Process proc[], int n) {
    for (int i = 0; i < n; i++) {
        proc[i].turnAroundTime = proc[i].burstTime + proc[i].waitTime;
    }
}

void displayProcessInfo(struct Process proc[], int n) {
    printf("PID\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\n", proc[i].pid, proc[i].burstTime, proc[i].waitTime, proc[i].turnAroundTime);
    }
}

void calculateAverageTimes(struct Process proc[], int n) {
    int totalWaitingTime = 0, totalTurnAroundTime = 0;

    for (int i = 0; i < n; i++) {
        totalWaitingTime += proc[i].waitTime;
        totalTurnAroundTime += proc[i].turnAroundTime;
    }

    printf("Average Waiting Time: %.2f\n", (float)totalWaitingTime / n);
    printf("Average Turnaround Time: %.2f\n", (float)totalTurnAroundTime / n);
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process proc[n];

    for (int i = 0; i < n; i++) {
        proc[i].pid = i + 1;
        printf("Enter burst time for process %d: ", proc[i].pid);
        scanf("%d", &proc[i].burstTime);
    }

    calculateWaitingTime(proc, n);
    calculateTurnAroundTime(proc, n);
    displayProcessInfo(proc, n);
    calculateAverageTimes(proc, n);

    return 0;
}


SAMPLE INPUT
Enter the number of processes: 3
Enter burst time for process 1: 4
Enter burst time for process 2: 2
Enter burst time for process 3: 5

SAMPLE OUTPUT
PID     Burst Time    Waiting Time   Turnaround Time
1       4             0              4
2       2             4              6
3       5             6              11
Average Waiting Time: 3.33
Average Turnaround Time: 7.00
